#!/data/data/com.termux/files/usr/bin/python3

import os
import sys
import time
import logging
import sqlite3
import requests
from threading import Thread, Lock
from datetime import datetime, timedelta
import telebot
from telebot import types

# ===================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====================
TOKEN = "7932981986:AAEa94uFnMkGNjUKK_qEyoSiRo7L_gF67r0"
ADMIN_ID = 796652393
LOG_FILE = "bot.log"
DB_FILE = "users.db"
CACHE_TTL = 300
API_URL = "https://api.coingecko.com/api/v3"
API_TIMEOUT = 30

CRYPTO_LIST = [
    "‚Çø BTC", "Œû ETH", "‚ìÉ BNB", "‚óé SOL", "‚úï XRP",
    "‚Ç≥ ADA", "√ê DOGE", "‚óè DOT", "üêï SHIB", "üîº AVAX",
    "‚óà MATIC", "üîó LINK", "‚öõ ATOM", "ü¶Ñ UNI", "≈Å LTC",
    "‚òÖ XLM", "‚àÜ ALGO", "üìÅ FIL", "‚ìã VET", "œ¥ THETA",
    "Íú© XTZ", "Œµ EOS"
]

CRYPTO_IDS = {
    "BTC": "bitcoin", "ETH": "ethereum", "BNB": "binancecoin",
    "SOL": "solana", "XRP": "ripple", "ADA": "cardano",
    "DOGE": "dogecoin", "DOT": "polkadot", "SHIB": "shiba-inu",
    "AVAX": "avalanche-2", "MATIC": "matic-network",
    "LINK": "chainlink", "ATOM": "cosmos", "UNI": "uniswap",
    "LTC": "litecoin", "XLM": "stellar", "ALGO": "algorand",
    "FIL": "filecoin", "VET": "vechain", "THETA": "theta-token",
    "XTZ": "tezos", "EOS": "eos"
}

# ===================== –ù–ê–°–¢–†–û–ô–ö–ê =====================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('CRYPTO_BOT')

bot = telebot.TeleBot(TOKEN, parse_mode='HTML')
cache_lock = Lock()
user_data_lock = Lock()
crypto_cache = {'rates': {}, 'last_updated': None}
user_data = {}

# ===================== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====================
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            premium_until REAL DEFAULT 0,
            join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )''')
        
        cursor.execute('''CREATE TABLE IF NOT EXISTS alerts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            crypto TEXT,
            threshold REAL,
            direction TEXT CHECK(direction IN ('above', 'below')),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )''')
        
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"DB error: {e}")
        return False
    finally:
        conn.close()

# ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================
def is_premium(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å–∞"""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT premium_until FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] > time.time() if result else False

def get_crypto_rates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    try:
        with cache_lock:
            if crypto_cache['last_updated'] and \
               (time.time() - crypto_cache['last_updated']) < CACHE_TTL:
                return crypto_cache['rates']
            
            ids = ','.join(CRYPTO_IDS.values())
            response = requests.get(
                f"{API_URL}/simple/price?ids={ids}&vs_currencies=usd,rub",
                timeout=API_TIMEOUT
            )
            data = response.json()
            
            rates = {
                symbol: {'usd': data[coin_id]['usd'], 'rub': data[coin_id]['rub']}
                for symbol, coin_id in CRYPTO_IDS.items()
            }
            
            crypto_cache.update({
                'rates': rates,
                'last_updated': time.time()
            })
            return rates
    except Exception as e:
        logger.error(f"API error: {e}")
        return None

# ===================== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====================
def main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton('üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'),
        types.KeyboardButton('üìä –ö—É—Ä—Å—ã'),
        types.KeyboardButton('üîî –ê–ª–µ—Ä—Ç—ã'),
        types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å')
    ]
    markup.add(*buttons)
    return markup

def crypto_select_keyboard(action='select'):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    markup = types.InlineKeyboardMarkup(row_width=4)
    for i in range(0, len(CRYPTO_LIST), 4):
        row = CRYPTO_LIST[i:i+4]
        buttons = [
            types.InlineKeyboardButton(
                crypto,
                callback_data=f'{action}_{crypto.split()[-1]}'
            ) for crypto in row if crypto.split()[-1] in CRYPTO_IDS
        ]
        markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel'))
    return markup

def alert_direction_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–í—ã—à–µ —Ü–µ–Ω—ã", callback_data='alert_above'),
        types.InlineKeyboardButton("–ù–∏–∂–µ —Ü–µ–Ω—ã", callback_data='alert_below')
    )
    markup.row(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel'))
    return markup

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====================
@bot.message_handler(commands=['start', 'help'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        init_db()
        with sqlite3.connect(DB_FILE) as conn:
            conn.execute(
                "INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
                (message.from_user.id, message.from_user.username, 
                 message.from_user.first_name, message.from_user.last_name)
            )
        
        bot.send_message(
            message.chat.id,
            "ü™ô <b>–ö—Ä–∏–ø—Ç–æ-–±–æ—Ç —Å 22+ –≤–∞–ª—é—Ç–∞–º–∏</b>\n\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –∏–∫–æ–Ω–∫–∞–º–∏\n‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–∞—Ö\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Start error: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda m: m.text == 'üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
def calculator_start(message):
    """–ó–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    with user_data_lock:
        user_data[message.from_user.id] = {'action': 'select_from'}
    bot.send_message(
        message.chat.id,
        "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:</b>",
        reply_markup=crypto_select_keyboard('calc_from')
    )

@bot.message_handler(func=lambda m: m.text == 'üìä –ö—É—Ä—Å—ã')
def show_rates(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç"""
    rates = get_crypto_rates()
    if not rates:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã")
        return
    
    response = "üìà <b>–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:</b>\n\n"
    for crypto in CRYPTO_LIST:
        symbol = crypto.split()[-1]
        if symbol in rates:
            response += f"{crypto}: {rates[symbol]['usd']:.4f} USD | {rates[symbol]['rub']:.2f} RUB\n"
    
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda m: m.text == 'üîî –ê–ª–µ—Ä—Ç—ã')
def alerts_menu(message):
    """–ú–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤"""
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT crypto, threshold, direction FROM alerts WHERE user_id=?",
            (message.from_user.id,)
        )
        alerts = cursor.fetchall()
        
    text = "üìã <b>–í–∞—à–∏ –∞–ª–µ—Ä—Ç—ã:</b>\n\n" + "\n".join(
        f"{a[0]} {'–≤—ã—à–µ' if a[2] == 'above' else '–Ω–∏–∂–µ'} {a[1]:.4f} USD" 
        for a in alerts
    ) if alerts else "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data='add_alert'),
        types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data='delete_alert')
    )
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def show_help(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "<b>üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b> - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–µ–∂–¥—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏\n"
        "<b>üìä –ö—É—Ä—Å—ã</b> - —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤—Å–µ—Ö –≤–∞–ª—é—Ç\n"
        "<b>üîî –ê–ª–µ—Ä—Ç—ã</b> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–∞—Ö\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é"
    )
    bot.send_message(message.chat.id, help_text)

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK =====================
@bot.callback_query_handler(func=lambda call: call.data.startswith('calc_from_'))
def handle_calc_from(call):
    """–í—ã–±–æ—Ä –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    symbol = call.data.split('_')[2]
    with user_data_lock:
        user_data[call.from_user.id] = {
            'action': 'calc_to',
            'from_currency': symbol
        }
    bot.edit_message_text(
        f"‚û°Ô∏è –í—ã–±—Ä–∞–Ω–æ: {symbol}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É:</b>",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=crypto_select_keyboard('calc_to')
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('calc_to_'))
def handle_calc_to(call):
    """–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    symbol = call.data.split('_')[2]
    user_id = call.from_user.id
    
    with user_data_lock:
        state = user_data.get(user_id, {})
        if not state or state.get('action') != 'calc_to':
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
            return
            
        if symbol == state.get('from_currency'):
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É")
            return
            
        user_data[user_id] = {
            'action': 'calc_amount',
            'from_currency': state['from_currency'],
            'to_currency': symbol
        }
    
    bot.edit_message_text(
        f"üî¢ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</b>\n\n{state['from_currency']} ‚Üí {symbol}",
        call.message.chat.id,
        call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data == 'add_alert')
def handle_add_alert(call):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    with user_data_lock:
        user_data[call.from_user.id] = {'action': 'alert_select'}
    bot.edit_message_text(
        "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∞–ª–µ—Ä—Ç–∞:</b>",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=crypto_select_keyboard('alert_crypto')
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('alert_crypto_'))
def handle_alert_crypto(call):
    """–í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –∞–ª–µ—Ä—Ç–∞"""
    symbol = call.data.split('_')[2]
    with user_data_lock:
        user_data[call.from_user.id] = {
            'action': 'alert_direction',
            'alert_crypto': symbol
        }
    bot.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–æ: {symbol}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞:</b>",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=alert_direction_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data in ['alert_above', 'alert_below'])
def handle_alert_direction(call):
    """–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
    direction = 'above' if call.data == 'alert_above' else 'below'
    
    with user_data_lock:
        state = user_data.get(call.from_user.id, {})
        if not state or state.get('action') != 'alert_direction':
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞")
            return
            
        user_data[call.from_user.id] = {
            'action': 'alert_threshold',
            'alert_crypto': state['alert_crypto'],
            'alert_direction': direction
        }
    
    bot.edit_message_text(
        f"üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤—É—é —Ü–µ–Ω—É (USD):</b>\n\n"
        f"–í–∞–ª—é—Ç–∞: {state['alert_crypto']}\n"
        f"–¢–∏–ø: {'–≤—ã—à–µ' if direction == 'above' else '–Ω–∏–∂–µ'} —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã",
        call.message.chat.id,
        call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data == 'delete_alert')
def handle_delete_alert(call):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, crypto, threshold, direction FROM alerts WHERE user_id=?",
            (call.from_user.id,)
        )
        alerts = cursor.fetchall()
        
        if not alerts:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
            
        markup = types.InlineKeyboardMarkup()
        for alert in alerts:
            alert_id, crypto, threshold, direction = alert
            markup.add(types.InlineKeyboardButton(
                f"{crypto} {direction} {threshold:.4f}",
                callback_data=f"delete_{alert_id}"
            ))
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel'))
        
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–µ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_confirm(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
    alert_id = call.data.split('_')[1]
    
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "DELETE FROM alerts WHERE id=? AND user_id=?",
            (alert_id, call.from_user.id)
        )
        conn.commit()
        
        if cursor.rowcount > 0:
            bot.answer_callback_query(call.id, "–ê–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω")
            bot.edit_message_text(
                "‚úÖ –ê–ª–µ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "–ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def handle_cancel(call):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    with user_data_lock:
        user_data.pop(call.from_user.id, None)
    bot.edit_message_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        call.message.chat.id,
        call.message.message_id
    )

# ===================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =====================
@bot.message_handler(func=lambda m: user_data.get(m.from_user.id, {}).get('action') == 'calc_amount')
def handle_calc_amount(message):
    """–†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
            
        with user_data_lock:
            state = user_data.get(message.from_user.id, {})
            if not state:
                raise ValueError
                
            from_curr = state['from_currency']
            to_curr = state['to_currency']
            user_data.pop(message.from_user.id, None)
            
        rates = get_crypto_rates()
        if not rates or from_curr not in rates or to_curr not in rates:
            raise ValueError
            
        result = (amount * rates[from_curr]['usd']) / rates[to_curr]['usd']
        
        response = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</b>\n\n"
            f"{amount:.4f} {from_curr} = {result:.8f} {to_curr}\n\n"
            f"<b>–ö—É—Ä—Å:</b> 1 {from_curr} = {rates[from_curr]['usd']/rates[to_curr]['usd']:.8f} {to_curr}"
        )
        
        bot.send_message(
            message.chat.id,
            response,
            reply_markup=main_menu_keyboard()
        )
    except:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É",
            reply_markup=main_menu_keyboard()
        )

@bot.message_handler(func=lambda m: user_data.get(m.from_user.id, {}).get('action') == 'alert_threshold')
def handle_alert_threshold(message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–∞"""
    try:
        threshold = float(message.text)
        if threshold <= 0:
            raise ValueError
            
        with user_data_lock:
            state = user_data.get(message.from_user.id, {})
            if not state:
                raise ValueError
                
            crypto = state['alert_crypto']
            direction = state['alert_direction']
            user_data.pop(message.from_user.id, None)
            
        with sqlite3.connect(DB_FILE) as conn:
            conn.execute(
                "INSERT INTO alerts (user_id, crypto, threshold, direction) VALUES (?, ?, ?, ?)",
                (message.from_user.id, crypto, threshold, direction)
            )
            
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ê–ª–µ—Ä—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n{crypto} {direction} {threshold:.4f} USD",
            reply_markup=main_menu_keyboard()
        )
    except:
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É",
            reply_markup=main_menu_keyboard()
        )

# ===================== –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–ö–ò –ê–õ–ï–†–¢–û–í =====================
def check_alerts():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
    while True:
        try:
            with sqlite3.connect(DB_FILE) as conn:
                cursor = conn.cursor()
                rates = get_crypto_rates()
                
                if not rates:
                    time.sleep(60)
                    continue
                
                cursor.execute("SELECT * FROM alerts")
                for alert in cursor.fetchall():
                    alert_id, user_id, crypto, threshold, direction, _ = alert
                    
                    if crypto in rates:
                        current_price = rates[crypto]['usd']
                        if (direction == 'above' and current_price >= threshold) or \
                           (direction == 'below' and current_price <= threshold):
                            try:
                                bot.send_message(
                                    user_id,
                                    f"üö® –ê–ª–µ—Ä—Ç! {crypto} {'–¥–æ—Å—Ç–∏–≥' if direction == 'above' else '—É–ø–∞–ª –¥–æ'} {current_price:.2f} USD"
                                )
                                cursor.execute(
                                    "DELETE FROM alerts WHERE id=?",
                                    (alert_id,)
                                )
                                conn.commit()
                            except Exception as e:
                                if "blocked" in str(e):
                                    cursor.execute(
                                        "DELETE FROM alerts WHERE id=?",
                                        (alert_id,)
                                    )
                                    conn.commit()
            
            time.sleep(60)
        except Exception as e:
            logger.error(f"Alert check error: {e}")
            time.sleep(60)

# ===================== –ó–ê–ü–£–°–ö =====================
if __name__ == "__main__":
    try:
        if os.path.exists(DB_FILE):
            os.remove(DB_FILE)
        
        init_db()
        Thread(target=check_alerts, daemon=True).start()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"Startup failed: {e}")
        sys.exit(1)
